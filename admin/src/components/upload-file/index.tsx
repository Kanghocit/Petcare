import React, { useState, useRef, useEffect } from "react";
import { PlusOutlined } from "@ant-design/icons";
import { Image, Upload, message } from "antd";
import type { GetProp, UploadFile, UploadProps } from "antd";
import type { UploadRequestOption as RcCustomRequestOptions } from "rc-upload/lib/interface";
import type { RcFile } from "antd/es/upload/interface";
import { uploadMultipleImages } from "@/libs/upload";

type FileType = Parameters<GetProp<UploadProps, "beforeUpload">>[0];

interface UploadFileProps {
  onImageUpload?: (imageUrls: string[]) => void;
  defaultImages?: string[];
  folder?: string; // Th∆∞ m·ª•c con trong BE (vd: "product", "user", "uploads")
  maxCount?: number; // S·ªë l∆∞·ª£ng ·∫£nh t·ªëi ƒëa
}

const getBase64 = (file: FileType): Promise<string> =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
  });

const UploadFile: React.FC<UploadFileProps> = ({
  onImageUpload,
  defaultImages = [],
  folder = "uploads",
  maxCount = 8,
}) => {
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState("");
  const apiBase =
    process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000/api";
  const imageBase = apiBase.replace(/\/api\/?$/, "");
  const toAbsolute = (url: string) =>
    url?.startsWith("http") ? url : `${imageBase}${url}`;
  const toRelative = (url: string) =>
    url?.startsWith(imageBase) ? url.slice(imageBase.length) : url;

  const [fileList, setFileList] = useState<UploadFile[]>(
    defaultImages.map((url, index) => ({
      uid: `-${index + 1}`,
      name: `image-${index + 1}.jpg`,
      status: "done" as const,
      url: toAbsolute(url),
    })),
  );

  // Ref ƒë·ªÉ l∆∞u tr·ªØ t·∫•t c·∫£ URLs ƒë√£ upload
  const uploadedUrlsRef = useRef<string[]>(defaultImages);

  // Keep fileList and emitted urls in sync when defaultImages changes
  useEffect(() => {
    const nextList = defaultImages.map((url, index) => ({
      uid: `-${index + 1}`,
      name: `image-${index + 1}.jpg`,
      status: "done" as const,
      url: toAbsolute(url),
    }));
    setFileList(nextList);
    uploadedUrlsRef.current = [...defaultImages];
    onImageUpload?.([...defaultImages]);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [JSON.stringify(defaultImages)]);

  const beforeUpload = (file: FileType) => {
    const isJpgOrPng =
      file.type === "image/jpeg" ||
      file.type === "image/png" ||
      file.type === "image/webp";
    if (!isJpgOrPng) {
      message.error("Ch·ªâ h·ªó tr·ª£ file JPG/PNG/WEBP!");
      return false;
    }
    const isLt2M = file.size! / 1024 / 1024 < 2;
    if (!isLt2M) {
      message.error("K√≠ch th∆∞·ªõc ·∫£nh ph·∫£i nh·ªè h∆°n 2MB!");
      return false;
    }
    return true;
  };

  const saveImagesToBackend = async (files: File[]): Promise<string[]> => {
    try {
      // T·∫°o FormData ƒë·ªÉ g·ª≠i nhi·ªÅu file
      const formData = new FormData();
      // NOTE: Multer reads fields as they arrive. Ensure 'folder' is appended BEFORE files
      formData.append("folder", folder);

      // Th√™m t·ª´ng file v√†o FormData
      files.forEach((file, index) => {
        // T·∫°o t√™n file theo ƒë·ªãnh d·∫°ng ng√†y/th√°ng/nƒÉm-t√™n ·∫£nh
        const now = new Date();
        const day = String(now.getDate()).padStart(2, "0");
        const month = String(now.getMonth() + 1).padStart(2, "0");
        const year = now.getFullYear();

        // L·∫•y ph·∫ßn t√™n file g·ªëc (kh√¥ng c√≥ extension)
        const originalName = file.name.replace(/\.[^/.]+$/, "");
        const fileExtension = file.name.split(".").pop();

        // T·∫°o t√™n file m·ªõi: dd-mm-yyyy-t√™n ·∫£nh.extension
        const newFileName = `${day}-${month}-${year}-${originalName}.${fileExtension}`;

        formData.append("images", file);
        formData.append(`fileName_${index}`, newFileName);
      });

      // G·ª≠i request ƒë·∫øn BE ƒë·ªÉ l∆∞u nhi·ªÅu file
      const response = await uploadMultipleImages(formData);

      if (response.ok) {
        const result = await response.json();

        message.success(result.message);
        return result.imageUrls; // Tr·∫£ v·ªÅ m·∫£ng URL ·∫£nh
      } else {
        const errorData = await response.json();

        throw new Error(errorData.error || "Upload th·∫•t b·∫°i");
      }
    } catch (error) {
      console.error("üí• L·ªói upload:", error);
      message.error(
        `Upload ·∫£nh th·∫•t b·∫°i: ${error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`,
      );
      throw error;
    }
  };

  const handlePreview = async (file: UploadFile) => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj as FileType);
    }

    setPreviewImage(file.url || (file.preview as string));
    setPreviewOpen(true);
  };

  const handleChange: UploadProps["onChange"] = async ({
    fileList: newFileList,
  }) => {
    // Ch·ªâ ƒë·ªìng b·ªô UI; KH√îNG emit ra ngo√†i ·ªü ƒë√¢y ƒë·ªÉ tr√°nh x√≥a ·∫£nh khi upload ch∆∞a xong
    setFileList(newFileList);
  };

  const handleRemove: UploadProps["onRemove"] = async (file) => {
    // C·∫≠p nh·∫≠t danh s√°ch URL khi x√≥a m·ªôt ·∫£nh
    const nextList = (fileList || []).filter((f) => f.uid !== file.uid);
    const urlsRelative = nextList
      .map((f) => f.url)
      .filter(Boolean)
      .map((u) => toRelative(u as string)) as string[];
    uploadedUrlsRef.current = urlsRelative;
    onImageUpload?.([...uploadedUrlsRef.current]);
    setFileList(nextList);
    return true;
  };

  // Custom upload function ƒë·ªÉ x·ª≠ l√Ω upload th·ªß c√¥ng
  const customRequest = async (options: RcCustomRequestOptions) => {
    const { file, onSuccess, onError } = options;

    try {
      // Upload file l√™n BE
      const rcFile = file as RcFile;
      const imageUrls = await saveImagesToBackend([rcFile as unknown as File]);

      if (imageUrls.length > 0) {
        // C·∫≠p nh·∫≠t fileList v·ªõi URL m·ªõi
        const updatedFile: UploadFile = {
          uid: rcFile.uid,
          name: rcFile.name,
          status: "done" as const,
          url: toAbsolute(imageUrls[0]),
        };

        // C·∫≠p nh·∫≠t fileList
        setFileList((prevFileList) => {
          return prevFileList.map((f) =>
            f.uid === rcFile.uid ? updatedFile : f,
          );
        });

        // Th√™m URL m·ªõi v√†o ref
        uploadedUrlsRef.current = [...uploadedUrlsRef.current, imageUrls[0]];

        // G·ªçi callback v·ªõi T·∫§T C·∫¢ URLs ƒë√£ upload
        if (onImageUpload) {
          onImageUpload([...uploadedUrlsRef.current]);
        }

        onSuccess?.(updatedFile as unknown as never);
      } else {
        onError?.(new Error("Upload th·∫•t b·∫°i"));
      }
    } catch (error) {
      console.error("‚ùå L·ªói upload:", error);
      onError?.(
        error instanceof Error
          ? error
          : (new Error("Upload th·∫•t b·∫°i") as never),
      );
    }
  };

  const uploadButton = (
    <button style={{ border: 0, background: "none" }} type="button">
      <PlusOutlined />
      <div style={{ marginTop: 8 }}>Upload</div>
    </button>
  );

  return (
    <>
      <Upload
        listType="picture-card"
        fileList={fileList}
        onPreview={handlePreview}
        onChange={handleChange}
        onRemove={handleRemove}
        beforeUpload={beforeUpload}
        accept="image/*"
        maxCount={maxCount}
        customRequest={customRequest}
      >
        {fileList.length >= maxCount ? null : uploadButton}
      </Upload>
      {previewImage && (
        <Image
          alt=""
          wrapperStyle={{ display: "none" }}
          preview={{
            visible: previewOpen,
            onVisibleChange: (visible) => setPreviewOpen(visible),
            afterOpenChange: (visible) => !visible && setPreviewImage(""),
          }}
          src={previewImage}
        />
      )}
    </>
  );
};

export default UploadFile;
